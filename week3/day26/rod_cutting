int func(int ind,vector<int> &price,int N,vector<vector<int>>& dp)
{
    if(dp[ind][N]!=-1)return dp[ind][N];
    if(ind==0)return (N*price[0]);
    int ntake = 0+func(ind-1,price,N,dp);
    int len = ind + 1 ;
    int take = INT_MIN;
    if(len<=N) take = price[ind] + func(ind,price,N-len,dp);
    return dp[ind][N] =  max(take,ntake);
}
int cutRod(vector<int> &price, int n)
{
    vector<vector<int>> dp(price.size()+1,vector<int> (n+1,-1));
    return func(price.size()-1,price,n,dp);
}
