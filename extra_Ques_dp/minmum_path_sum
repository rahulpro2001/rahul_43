int minSumPath(vector<vector<int>> &grid) {
   for(int i=grid[0].size()-2;i>=0;i--)grid[grid.size()-1][i]+=grid[grid.size()-1][i+1];
   for(int i=grid.size()-2;i>=0;i--)grid[i][grid[0].size()-1]+=grid[i+1][grid[0].size()-1];
   for(int i = grid.size()-2;i>=0;i--)
   {
       for(int j = grid[0].size()-2;j>=0;j--)
       {
           grid[i][j]+=min(grid[i+1][j],grid[i][j+1]);
       }
   }
    return grid[0][0];
}

// int func(vector<vector<int>> &grid,int row,int col)
// {
//     if(row<0 || col<0 )return 99999;
//     if(row==0 and col==0)return grid[0][0];
//     int up= func(grid,row-1,col);
//     int left = func(grid,row,col-1);
//     return grid[row][col]+min(up,left);
// }
// int minSumPath(vector<vector<int>> &grid) {
//     // Write your code here.
//     return func(grid,grid.size()-1,grid[0].size()-1);
// }
// 2^m*n